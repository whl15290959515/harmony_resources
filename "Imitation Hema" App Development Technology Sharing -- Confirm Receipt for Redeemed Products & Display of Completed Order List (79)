Technology Stack
AppGallery Connect
Development Preparation
In the previous section, we implemented the pickup confirmation function for redeemed product orders, data refresh during tab switching, and the display of the awaiting receipt order list. This section focuses on implementing the receipt confirmation function and displaying the completed order list.
Functionality Analysis
When clicking "Confirm Receipt," modify the order status order_type to 3 and refresh the awaiting receipt order list. When switching tabs, refresh the data in the completed order list to ensure real-time updates.
Code Implementation
First, implement the logic to modify the order status in the "Confirm Receipt" button of the awaiting receipt list:

typescript
Text("Confirm Receipt")
  .fontColor(Color.Black)
  .fontSize(12)
  .padding(5)
  .borderRadius(10)
  .backgroundColor(Color.Pink)
  .onClick(async () => {
    let order = new points_order_info();
    order.id = item.id;
    order.user_id = String(this.user!.user_id);
    order.order_code = item.order_code;
    order.url = item.url;
    order.name = item.name;
    order.order_type = 3; // 3 indicates order completed
    order.points = item.points;
    order.msg = item.msg;
    order.amount = 1;
    order.nike_name = item.nike_name;
    order.address = item.address;
    order.phone = item.phone;
    order.crete_time = item.crete_time;
    order.success_time = this.thisTime();
    let num = await databaseZone.upsert(order);
    if (num > 0) {
      showToast("Your order has been completed!");
      this.onRefresh();
    }
  })

After modification, query the completed order list:

typescript
@State currentIndexCheck: number = 3;
@Prop @Watch("onRefresh") currentIndex: number = 0;
@State orderList: PointsOrderInfo[] = [];
@State user: User | null = null;

async onRefresh() {
  if (this.currentIndexCheck === this.currentIndex) {
    if (this.user !== null) {
      let condition = new cloudDatabase.DatabaseQuery(points_order_info);
      condition.equalTo("user_id", this.user?.user_id).and().equalTo("order_type", 3);
      let listData = await databaseZone.query(condition);
      let json = JSON.stringify(listData);
      let data: PointsOrderInfo[] = JSON.parse(json);
      this.orderList = data;
    }
  }
}

async aboutToAppear(): Promise<void> {
  const value = await StorageUtils.getAll('user');
  if (value !== "") {
    this.user = JSON.parse(value);
    if (this.user !== null) {
      let condition = new cloudDatabase.DatabaseQuery(points_order_info);
      condition.equalTo("user_id", this.user?.user_id).and().equalTo("order_type", 3);
      let listData = await databaseZone.query(condition);
      let json = JSON.stringify(listData);
      let data: PointsOrderInfo[] = JSON.parse(json);
      this.orderList = data;
    }
  }
}

Load the completed order list content:

typescript
List({ space: 10 }) {
  ForEach(this.orderList, (item: PointsOrderInfo, index: number) => {
    ListItem() {
      Column({ space: 10 }) {
        Row() {
          Text("Order No.: " + item.order_code)
            .fontColor(Color.Black)
            .fontSize(14);
          Text("Order completed, thank you for your use!")
            .fontColor(Color.Black)
            .fontSize(14);
        }
        .justifyContent(FlexAlign.SpaceBetween)
        .width('100%');

        Row({ space: 10 }) {
          Image($r('app.media.duihuan'))
            .height(40)
            .width(40)
            .borderRadius(5);
          Column({ space: 10 }) {
            Text("Product Type: Points Redemption")
              .fontColor(Color.Black)
              .fontSize(14);
            Text("Redemption Time: " + item.crete_time)
              .fontColor(Color.Black)
              .fontSize(14);
            Text("Contact: " + item.phone)
              .fontColor(Color.Black)
              .fontSize(14);
            Text("Pickup Address: " + item.address)
              .fontColor(Color.Black)
              .fontSize(14);
          }.alignItems(HorizontalAlign.Start);
        }
        .margin({ top: 10 })
        .alignItems(VerticalAlign.Top)
        .width('100%')
        .justifyContent(FlexAlign.Start);

        Row({ space: 10 }) {
          Text()
          Blank()
          Text("Completion Time: " + item.success_time)
            .fontColor(Color.Black)
            .fontSize(12)
            .padding(5);
        }
        .width('100%');
      }
      .padding(10)
      .backgroundColor(Color.White)
      .borderRadius(10)
      .width('100%')
      .justifyContent(FlexAlign.SpaceBetween);
    }
  });
}
.padding(10);




This implements the receipt confirmation function for redeemed products and displays the completed order list.
