
Technology Stack
AppGallery Connect
Development Preparation
In the previous section, we implemented order cancellation, data refresh during tab switching, and the display of canceled order lists. This section focuses on implementing the pickup confirmation function and the display of the awaiting receipt order list.
Functionality Analysis
When clicking "Confirm Pickup," modify the order status order_type to 2 and refresh the awaiting shipment order list. When switching tabs, refresh the data in the awaiting receipt list to ensure real-time updates.
Code Implementation
First, implement the pickup confirmation function to modify the order status:

typescript
Row({ space: 10 }) {
  Text()
  Blank()
  Text("Confirm Pickup")
    .fontColor(Color.Black)
    .fontSize(12)
    .padding(5)
    .borderRadius(10)
    .backgroundColor(Color.Pink)
    .onClick(async () => {
      let order = new points_order_info();
      order.id = item.id;
      order.user_id = String(this.user!.user_id);
      order.order_code = item.order_code;
      order.url = item.url;
      order.name = item.name;
      order.order_type = 2; // 2 indicates order picked up
      order.points = item.points;
      if (item.msg !== '') {
        order.msg = item.msg;
      } else {
        order.msg = "No remarks";
      }
      order.amount = 1;
      order.nike_name = item.nike_name;
      order.address = item.address;
      order.phone = item.phone;
      order.crete_time = item.crete_time;
      order.cancel_time = this.thisTime();
      let num = await databaseZone.upsert(order);
      if (num > 0) {
        showToast("Your order has been picked up!");
        this.onRefresh();
      }
    })
  Text("Cancel Order")
    .fontColor(Color.Black)
    .fontSize(12)
    .padding(5)
    .borderRadius(10)
    .border({ width: 1, color: Color.Grey })
    .onClick(async () => {
      let order = new points_order_info();
      order.id = item.id;
      order.user_id = String(this.user!.user_id);
      order.order_code = item.order_code;
      order.url = item.url;
      order.name = item.name;
      order.order_type = 1; // 1 indicates canceled
      order.points = item.points;
      if (item.msg !== '') {
        order.msg = item.msg;
      } else {
        order.msg = "No remarks";
      }
      order.amount = 1;
      order.nike_name = item.nike_name;
      order.address = item.address;
      order.phone = item.phone;
      order.crete_time = item.crete_time;
      order.cancel_time = this.thisTime();
      let num = await databaseZone.upsert(order);
      if (num > 0) {
        showToast("Redemption canceled successfully");
        this.onRefresh();
      }
    })
}
.width('100%')

Implement data refresh when switching to the awaiting receipt tab:

typescript
@State currentIndexCheck: number = 2;
@Prop @Watch("onRefresh") currentIndex: number = 0;
@State orderList: PointsOrderInfo[] = [];
@State user: User | null = null;

async onRefresh() {
  if (this.currentIndexCheck === this.currentIndex) {
    if (this.user !== null) {
      let condition = new cloudDatabase.DatabaseQuery(points_order_info);
      condition.equalTo("user_id", this.user?.user_id).and().equalTo("order_type", 2);
      let listData = await databaseZone.query(condition);
      let json = JSON.stringify(listData);
      let data: PointsOrderInfo[] = JSON.parse(json);
      this.orderList = data;
    }
  }
}

async aboutToAppear(): Promise<void> {
  const value = await StorageUtils.getAll('user');
  if (value !== "") {
    this.user = JSON.parse(value);
    if (this.user !== null) {
      let condition = new cloudDatabase.DatabaseQuery(points_order_info);
      condition.equalTo("user_id", this.user?.user_id).and().equalTo("order_type", 2);
      let listData = await databaseZone.query(condition);
      let json = JSON.stringify(listData);
      let data: PointsOrderInfo[] = JSON.parse(json);
      this.orderList = data;
    }
  }
}

Display the awaiting receipt order list with a "Confirm Receipt" button:

typescript
List({ space: 10 }) {
  ForEach(this.orderList, (item: PointsOrderInfo, index: number) => {
    ListItem() {
      Column({ space: 10 }) {
        Row() {
          Text("Order No.: " + item.order_code)
            .fontColor(Color.Black)
            .fontSize(14);
          Text("Awaiting Receipt")
            .fontColor(Color.Black)
            .fontSize(14);
        }
        .justifyContent(FlexAlign.SpaceBetween)
        .width('100%');

        Row({ space: 10 }) {
          Image($r('app.media.duihuan'))
            .height(40)
            .width(40)
            .borderRadius(5);
          Column({ space: 10 }) {
            Text("Product Type: Points Redemption")
              .fontColor(Color.Black)
              .fontSize(14);
            Text("Redemption Time: " + item.crete_time)
              .fontColor(Color.Black)
              .fontSize(14);
            Text("Contact: " + item.phone)
              .fontColor(Color.Black)
              .fontSize(14);
            Text("Pickup Address: " + item.address)
              .fontColor(Color.Black)
              .fontSize(14);
          }.alignItems(HorizontalAlign.Start);
        }
        .margin({ top: 10 })
        .alignItems(VerticalAlign.Top)
        .width('100%')
        .justifyContent(FlexAlign.Start);

        Row({ space: 10 }) {
          Text()
          Blank()
          Text("Confirm Receipt")
            .fontColor(Color.Black)
            .fontSize(12)
            .padding(5)
            .borderRadius(10)
            .backgroundColor(Color.Pink);
        }
        .width('100%');
      }
      .padding(10)
      .backgroundColor(Color.White)
      .borderRadius(10)
      .width('100%')
      .justifyContent(FlexAlign.SpaceBetween)
      .onClick(() => {
        // Navigation logic
      });
    }
  });
}
.padding(10);




Reference the component in TabContent:

typescript
TabContent() {
  Column() {
    LoadingPointsItem({ currentIndex: this.currentIndex })
  }.width('100%').height('100%')
}.tabBar(this.tabBuilder(2, 'Awaiting Receipt'))


This implements the pickup confirmation function and the display of the awaiting receipt order list.
