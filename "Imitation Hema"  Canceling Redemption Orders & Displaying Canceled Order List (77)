
Technology Stack
AppGallery Connect
Development Preparation
In the previous section, we implemented the display logic for the awaiting shipment redemption order list, successfully presenting it in the list. We added two buttons in the order items: "Confirm Pickup" and "Cancel Order". This section focuses on implementing order cancellation functionality and displaying the canceled order list after cancellation.
Functionality Analysis
To implement order cancellation, we need to modify the database data of the clicked item when the "Cancel Reservation" button is pressed, refresh the list data, and display the canceled list on the page. Additionally, when switching tabs, we must synchronize and refresh the component content to ensure data real-time accuracy.
Code Implementation
First, implement the cancellation function by modifying the order status order_type to 1:

typescript
Text("Cancel Order")
  .fontColor(Color.Black)
  .fontSize(12)
  .padding(5)
  .borderRadius(10)
  .border({ width: 1, color: Color.Grey })
  .onClick(async () => {
    let order = new points_order_info();
    order.id = item.id;
    order.user_id = String(this.user!.user_id);
    order.order_code = item.order_code;
    order.url = item.url;
    order.name = item.name;
    order.order_type = 1; // 1 indicates canceled
    order.points = item.points;
    if (item.msg !== '') {
      order.msg = item.msg;
    } else {
      order.msg = "No remarks";
    }
    order.amount = 1;
    order.nike_name = item.nike_name;
    order.address = item.address;
    order.phone = item.phone;
    order.crete_time = item.crete_time;
    order.cancel_time = this.thisTime();
    let num = await databaseZone.upsert(order);
    if (num > 0) {
      showToast("Redemption canceled successfully");
    }
  })

Retrieve user ID information from user preferences:

typescript
async aboutToAppear(): Promise<void> {
  const value = await StorageUtils.getAll('user');
  if (value !== "") {
    this.user = JSON.parse(value);
  }
}

Implement the tab switching refresh method:

typescript
@State currentIndexCheck: number = 0;
@Prop @Watch("onRefresh") currentIndex: number = 0;

async onRefresh() {
  if (this.currentIndexCheck === this.currentIndex) {
    if (this.user !== null) {
      let databaseZone = cloudDatabase.zone('default');
      let condition = new cloudDatabase.DatabaseQuery(points_order_info);
      condition.equalTo("user_id", this.user?.user_id).and().equalTo("order_type", 0);
      let listData = await databaseZone.query(condition);
      let json = JSON.stringify(listData);
      let data: PointsOrderInfo[] = JSON.parse(json);
      this.orderList = data;
    }
  }
}

async aboutToAppear(): Promise<void> {
  const value = await StorageUtils.getAll('user');
  if (value !== "") {
    this.user = JSON.parse(value);
    if (this.user !== null) {
      let databaseZone = cloudDatabase.zone('default');
      let condition = new cloudDatabase.DatabaseQuery(points_order_info);
      condition.equalTo("user_id", this.user?.user_id).and().equalTo("order_type", 0);
      let listData = await databaseZone.query(condition);
      let json = JSON.stringify(listData);
      let data: PointsOrderInfo[] = JSON.parse(json);
      this.orderList = data;
    }
  }
}

Reference the refresh method:

typescript
if (num > 0) {
  showToast("Redemption canceled successfully");
  this.onRefresh();
}

Next, implement the display of the canceled order list by creating a canceled order component:

typescript
import { points_order_info } from '../../../clouddb/points_order_info';
import { PointsOrderInfo } from '../../../entity/PointsOrderInfo';
import { User } from '../../../entity/User';
import { cloudDatabase } from '@kit.CloudFoundationKit';
import showToast from '../../../utils/ToastUtils';
import { StorageUtils } from '../../../utils/StorageUtils';
import { hilog } from '@kit.PerformanceAnalysisKit';

let databaseZone = cloudDatabase.zone('default');

@Component
export struct CancelPointsItem {
  @State currentIndexCheck: number = 1;
  @Prop @Watch("onRefresh") currentIndex: number = 0;
  @State orderList: PointsOrderInfo[] = [];
  @State user: User | null = null;

  async onRefresh() {
    if (this.currentIndexCheck === this.currentIndex) {
      if (this.user !== null) {
        let condition = new cloudDatabase.DatabaseQuery(points_order_info);
        condition.equalTo("user_id", this.user?.user_id).and().equalTo("order_type", 1);
        let listData = await databaseZone.query(condition);
        let json = JSON.stringify(listData);
        let data: PointsOrderInfo[] = JSON.parse(json);
        this.orderList = data;
      }
    }
  }

  async aboutToAppear(): Promise<void> {
    const value = await StorageUtils.getAll('user');
    if (value !== "") {
      this.user = JSON.parse(value);
      if (this.user !== null) {
        let condition = new cloudDatabase.DatabaseQuery(points_order_info);
        condition.equalTo("user_id", this.user?.user_id).and().equalTo("order_type", 1);
        let listData = await databaseZone.query(condition);
        let json = JSON.stringify(listData);
        let data: PointsOrderInfo[] = JSON.parse(json);
        this.orderList = data;
      }
    }
  }

  build() {
    Column() {
      List({ space: 10 }) {
        ForEach(this.orderList, (item: PointsOrderInfo, index: number) => {
          ListItem() {
            Column({ space: 10 }) {
              Row() {
                Text("Order No.: " + item.order_code)
                  .fontColor(Color.Black)
                  .fontSize(14);
                Text("Order Canceled")
                  .fontColor(Color.Black)
                  .fontSize(14);
              }
              .justifyContent(FlexAlign.SpaceBetween)
              .width('100%');

              Row({ space: 10 }) {
                Image($r('app.media.duihuan'))
                  .height(40)
                  .width(40)
                  .borderRadius(5);
                Column({ space: 10 }) {
                  Text("Product Type: Points Redemption")
                    .fontColor(Color.Black)
                    .fontSize(14);
                  Text("Redemption Time: " + item.crete_time)
                    .fontColor(Color.Black)
                    .fontSize(14);
                  Text("Contact: " + item.phone)
                    .fontColor(Color.Black)
                    .fontSize(14);
                  Text("Pickup Address: " + item.address)
                    .fontColor(Color.Black)
                    .fontSize(14);
                }.alignItems(HorizontalAlign.Start);
              }
              .margin({ top: 10 })
              .alignItems(VerticalAlign.Top)
              .width('100%')
              .justifyContent(FlexAlign.Start);
            }
            .padding(10)
            .backgroundColor(Color.White)
            .borderRadius(10)
            .width('100%')
            .justifyContent(FlexAlign.SpaceBetween)
            .onClick(() => {
              // Navigation logic
            });
          }
        });
      }
      .padding(10);
    }
  }

  thisTime(): string {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
  }
}





This completes the implementation of order cancellation and the display of the canceled order list.
